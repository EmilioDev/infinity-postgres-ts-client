generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

//basic data of all users
model User {
  identifier BigInt @id @default(autoincrement()) @unique

  name String?
  last_name String?

  phone String?
  email String?
  country String?
  degrees String?
  photo String?

  password_hash String

  isSuperUser Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  institution Institution[]
  metodologist Metodologist[]
  teacher Teacher[]
  student Student[]

  @@map("users")
}

//institutions
model Institution {
  identifier BigInt @id @default(autoincrement()) @unique

  name String
  description String?
  logo String?

  NIT String @unique
  REEUP String @unique

  website String?
  address String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rector BigInt
  user User @relation(fields: [rector], references: [identifier], onDelete: Cascade, onUpdate: Cascade)

  //relations
  courses Subject[]

  @@map("institutions")
}

//te creas un metodologista por cada asignatura en la que eres metodologista, 
//validar repeticiones
//the metodologist
model Metodologist {
  identifier BigInt @id @default(autoincrement()) @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId BigInt
  user User @relation(fields: [userId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)

  //courses CourseToMetodologist[]
  courseId BigInt
  course Subject @relation(fields: [courseId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)

  @@map("metodologist")
}

//also known as subject, course, asignatura...
model Subject {
  identifier BigInt @id @default(autoincrement()) @unique

  name String
  year Int @default(1)//this is for the year where this subject is imparted
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  institutionId BigInt
  institution Institution @relation(fields: [institutionId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)

  //relations
  metodologists Metodologist[]
  teachers Teacher[]
  students Student[]

  @@map("course")
}

//exercises of each subject
model Resource {
  identifier BigInt @id @default(autoincrement()) @unique

  name String?
  description String?
  photo String?
  requiresOnline Boolean @default(false)
  evaluation Float @default(0)//the evaluation given by metodologists

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resourceTemplateId BigInt
  template ResourceTemplate @relation(fields: [resourceTemplateId], references: [identifier])

  templateCustomValues Json?

  @@map("resources")
}

model ResourceTemplate {
  identifier BigInt @id @default(autoincrement()) @unique
  
  content Json?
  templateName String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resources Resource[]

  @@map("resourceTemplates")
}

//teachers
model Teacher {
  identifier BigInt @id @default(autoincrement()) @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  courseId BigInt
  course Subject @relation(fields: [courseId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)
  userId BigInt
  user User @relation(fields: [userId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)

  @@map("teachers")
}

//students
model Student {
  identifier BigInt @id @default(autoincrement()) @unique

  pendingApproval Boolean @default(true)

  evaluations Evaluation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  userId BigInt
  user User @relation(fields: [userId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)
  courseId BigInt
  course Subject @relation(fields: [courseId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)

  @@map("students")
}

//evaluations
model Evaluation {
  identifier BigInt @id @default(autoincrement()) @unique

  value Float
  evaluationName String? //you put here the name of the tests that generated this evaluation
  isFinal Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentId BigInt
  student Student @relation(fields: [studentId], references: [identifier], onDelete: Cascade, onUpdate: Cascade)

  @@map("evaluations")
}


model init {
  identifier String @id @db.Uuid
}

